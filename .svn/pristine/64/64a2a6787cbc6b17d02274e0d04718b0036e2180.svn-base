import { Component, OnInit, Injectable } from '@angular/core';
import { FormControl, Validators, FormBuilder, NgForm, FormGroup, FormArray } from '../../../../node_modules/@angular/forms';
import { Location } from '@angular/common';
import { EQuotationStatus } from '../../enums/EQuotationStatus.enum';
import { _ } from 'underscore';
import { Router } from '../../../../node_modules/@angular/router';
import { PageHistoryService } from '../../services/page-history/page-history.service';
import { IMinimumOrderQuantityItem } from '../../interfaces/IMinimumOrderQuantityItem';
import { IQuotationItem } from '../../interfaces/IQuotationItem';
import { EQuotationTerm } from '../../enums/EQuotationTerm.enum';
import { QuestionBase } from '../../dynamic-form-field/dynamic-form-field.component';

export class DropdownQuestion extends QuestionBase<string> {
  controlType = 'dropdown';
  options: {key: string, value: string}[] = [];

  constructor(options: {} = {}) {
    super(options);
    this.options = options['options'] || [];
  }
}

export class TextboxQuestion extends QuestionBase<string> {
  controlType = 'textbox';
  type: string;

  constructor(options: {} = {}) {
    super(options);
    this.type = options['type'] || '';
  }
}

@Injectable()
export class QuestionService {

  // TODO: get from a remote source of question metadata
  // TODO: make asynchronous
  getQuestions() {

    const questions: QuestionBase<any>[] = [

      new DropdownQuestion({
        key: 'brave',
        label: 'Bravery Rating',
        options: [
          {key: 'solid',  value: 'Solid'},
          {key: 'great',  value: 'Great'},
          {key: 'good',   value: 'Good'},
          {key: 'unproven', value: 'Unproven'}
        ],
        order: 3
      }),

      new TextboxQuestion({
        key: 'firstName',
        label: 'First name',
        value: 'Bombasto',
        required: true,
        order: 1
      }),

      new TextboxQuestion({
        key: 'emailAddress',
        label: 'Email',
        type: 'email',
        order: 2
      })
    ];

    return questions.sort((a, b) => a.order - b.order);
  }
}

@Component({
  selector: 'app-quotation-form',
  templateUrl: './quotation-form.component.html',
  styleUrls: ['./quotation-form.component.css']
})
export class QuotationFormComponent implements OnInit {
  questions: any[];
  // formData: FormGroup;
  // quotationStatusList: any = [];
  // quotationTermList: any = [];
  // selectedStatus = { 'displayName': 'Draft', 'key': '0' };
  // list: Array<IQuotationItem> = [
  //   { id: 1, quotationId: 1, minimumOrderQuantityItems: [
  //     { id: 1, quantity: 1000, unitAmount: 0.5 },
  //     { id: 1, quantity: 2000, unitAmount: 0.7 },
  //     { id: 1, quantity: 3000, unitAmount: 0.005 },
  //   ] as Array<IMinimumOrderQuantityItem> },
  //   { id: 1, quotationId: 1, minimumOrderQuantityItems: [
  //     { id: 1, quantity: 1000, unitAmount: 0.5 },
  //     { id: 1, quantity: 2000, unitAmount: 0.7 },
  //     { id: 1, quantity: 3000, unitAmount: 0.005 },
  //   ] as Array<IMinimumOrderQuantityItem> },
  //   { id: 1, quotationId: 1, minimumOrderQuantityItems: [
  //     { id: 1, quantity: 1000, unitAmount: 0.5 },
  //     { id: 1, quantity: 2000, unitAmount: 0.7 },
  //     { id: 1, quantity: 3000, unitAmount: 0.005 },
  //   ] as Array<IMinimumOrderQuantityItem> },
  //   { id: 1, quotationId: 1, minimumOrderQuantityItems: [
  //     { id: 1, quantity: 1000, unitAmount: 0.5 },
  //     { id: 1, quantity: 2000, unitAmount: 0.7 },
  //     { id: 1, quantity: 3000, unitAmount: 0.005 },
  //   ] as Array<IMinimumOrderQuantityItem> },
  // ];
  // displayedColumns: string[] = ['selected', 'quantity', 'unitAmount', 'subTotal'];

  constructor(public location: Location, public fb: FormBuilder, private router: Router, private pageHistoryService: PageHistoryService, service: QuestionService) {
    this.questions = service.getQuestions();
  }

  ngOnInit() {
    // _.each(EQuotationStatus, (item, key) => {
    //   if (!(this.quotationStatusList[item] && this.quotationStatusList[item]['displayName'] === key)) {
    //     this.quotationStatusList.push({ displayName: item, key: key });
    //   }
    // });
    // _.each(EQuotationTerm, (item, key) => {
    //   if (!(this.quotationTermList[item] && this.quotationTermList[item]['displayName'] === key)) {
    //     this.quotationTermList.push({ displayName: item, key: key });
    //   }
    // });
    // this.formData = this.fb.group({
    //   customer: new FormControl('', Validators.required), // typeahead
    //   term: new FormControl(_.first(this.quotationTermList).key), // enum
    //   revised: new FormControl(false), // checkbox
    //   status: new FormControl({ value: _.first(this.quotationStatusList).key, disabled: true }), // enum
    //   quotationItems: this.fb.array([
    //     // {
    //     //   id: 1,
    //     //   quotationId: 1,
    //     //   measurementWidth: new FormControl('', Validators.required),
    //     //   measurementLength: new FormControl('', Validators.required),
    //     //   minimumOrderQuantityItems: [
    //     //     { id: 1, quantity: 1000, unitAmount: 0.5 },
    //     //     { id: 1, quantity: 2000, unitAmount: 0.7 },
    //     //     { id: 1, quantity: 3000, unitAmount: 0.005 },
    //     //   ] as Array<IMinimumOrderQuantityItem>
    //     // },
    //     // {
    //     //   id: 1,
    //     //   quotationId: 1,
    //     //   measurementWidth: new FormControl('', Validators.required),
    //     //   measurementLength: new FormControl('', Validators.required),
    //     //   minimumOrderQuantityItems: [
    //     //     { id: 1, quantity: 1000, unitAmount: 0.5 },
    //     //     { id: 1, quantity: 2000, unitAmount: 0.7 },
    //     //     { id: 1, quantity: 3000, unitAmount: 0.005 },
    //     //   ] as Array<IMinimumOrderQuantityItem>
    //     // },
    //     // {
    //     //   id: 1,
    //     //   quotationId: 1,
    //     //   measurementWidth: new FormControl('', Validators.required),
    //     //   measurementLength: new FormControl('', Validators.required),
    //     //   minimumOrderQuantityItems: [
    //     //     { id: 1, quantity: 1000, unitAmount: 0.5 },
    //     //     { id: 1, quantity: 2000, unitAmount: 0.7 },
    //     //     { id: 1, quantity: 3000, unitAmount: 0.005 },
    //     //   ] as Array<IMinimumOrderQuantityItem>
    //     // },
    //   ])
    //   // quotation item(s) => { measurement width, measurement length, item, quality, colour, finishing, remark, moq item(s) => { MOQ, unit price } }
    // });
    // const control = <FormArray>this.formData.controls['quotationItems'];
    // control.push(this.fb.group({
    //   id: new FormControl(1),
    //   quotationId: new FormControl(1),
    //   measurementWidth: new FormControl('', Validators.required),
    //   measurementLength: new FormControl('', Validators.required),
    //   minimumOrderQuantityItems: this.fb.array([
    //     { id: 1, quantity: 1000, unitAmount: 0.5 },
    //     { id: 1, quantity: 2000, unitAmount: 0.7 },
    //     { id: 1, quantity: 3000, unitAmount: 0.005 },
    //   ] as Array<IMinimumOrderQuantityItem>)
    // }));
  }

  onBack() {
    if (this.pageHistoryService.previousPageUrl.indexOf('quotation') >= 0) {
      this.location.back();
    } else {
      this.router.navigate(['/quotation']);
    }
  }

  onSubmit({ value, valid }: { value: any, valid: boolean }) {
    if (!valid) {
      console.log('form is incomplete, please fill in all required fields...');
    } else {
      console.log('form submitting...');
    }
  }

}
